#include "include/vft_blink.h"

/*
Mandelbort set visualizer, it takes complex image plane as an input (e.g. generated by complex_plane.blink)

complex numbers are stored in vec2(X, Y) type, where X is real and Y is imaginary part
*/

kernel mandelbrotKernel : ImageComputationKernel<ePixelWise>
{
    Image<eRead, eAccessPoint, eEdgeNone> c_src;
    Image<eRead, eAccessRandom, eEdgeConstant> c_trap;

    Image<eWrite> dst;

    param:
        int max_iter;
        int mandelbrot_power;

        int julia_mode;
        float2 julia_coord_parm;

        int color_mode;

        float2 orbit_pt_parm;
        float2 orbit_line_pt_1_parm;
        float2 orbit_line_pt_2_parm;
        float2 orbit_circle_center_parm;
        float orbit_circle_radius;
        float2 orbit_bitmap_offset;
        float orbit_bitmap_zoom;

        float zoom;
        float exp_zoom;
        float exp_zoom_anim;
        float2 offset;
        int2 img_res;

    local:

    void define() {
        defineParam(max_iter, "maximum_iterations", 1000);
        defineParam(mandelbrot_power, "mandelbrot_power", 2);

        defineParam(julia_mode, "julia_mode", 0);
        defineParam(julia_coord_parm, "julia_coordinate", float2(0.0f, 0.0f));

        defineParam(color_mode, "color_mode", 1);

        defineParam(orbit_pt_parm, "orbit_point_coordinate", float2(0.0f, 0.0f));
        defineParam(orbit_line_pt_1_parm, "orbit_line_point_1_coordinate", float2(0.0f, 0.0f));
        defineParam(orbit_line_pt_2_parm, "orbit_line_point_2_coordinate", float2(1.0f, 1.0f));
        defineParam(orbit_circle_center_parm, "orbit_circle_coordinate", float2(1.0f, 1.0f));
        defineParam(orbit_circle_radius, "orbit_circle_radius", 2.0f);
        defineParam(orbit_bitmap_offset, "orbit_bitmap_offset", float2(0.0f, 0.0f));
        defineParam(orbit_bitmap_zoom, "orbit_bitmap_zoom", 100.0f);

        defineParam(zoom, "initial_zoom", 1.0f);
        defineParam(exp_zoom, "exponential_zoom", 0.0f);
        defineParam(exp_zoom_anim, "exponential_zoom_anim", 0.0f);
        defineParam(offset, "offset", float2(0.0f, 0.0f));
        defineParam(img_res, "resolution", int2(1920, 1080));
    }

    void init() {
    }

    void process(int2 pos)
    {
        //float2 c_my = float2(pos) - float2(img_res)/2;
        //c_my = zoomComplexPlane(c_my, zoom, exp_zoom_anim, offset);

        complex c = complex(c_src(0), c_src(1));
        //c = c_my;
        complex z = c;
        complex z0 = z;
        complex z_next;
        int i = 0;

        float col_smooth = exp( -dot(z,z) );

        float orbit_pt_dist = LARGE_NUMBER;
        float orbit_coord_dist = LARGE_NUMBER;
        float orbit_line_dist = LARGE_NUMBER;
        float orbit_circle_dist = LARGE_NUMBER;

        float2 orbit_pt = zoomComplexPlane(orbit_pt_parm - float2(img_res)/2, zoom, exp_zoom, offset) - offset;
        float2 orbit_line_pt_1 = zoomComplexPlane(orbit_line_pt_1_parm - float2(img_res)/2, zoom, exp_zoom, offset) - offset;
        float2 orbit_line_pt_2 = zoomComplexPlane(orbit_line_pt_2_parm - float2(img_res)/2, zoom, exp_zoom, offset) - offset;
        float2 orbit_circle_center = zoomComplexPlane(orbit_circle_center_parm - float2(img_res)/2, zoom, exp_zoom, offset) - offset;
        float4 orbit_bitmap_color = float4(0.0f);
        float2 orbit_sample_pos = float2(0.0f);

        float2 julia_coord = zoomComplexPlane(julia_coord_parm - float2(img_res)/2, zoom, exp_zoom, offset) - offset;

        if (julia_mode)
            c = julia_coord;

        for (; i < max_iter; i++)
        {
            // complex iterative function
            z_next = complex_add(complex_pow(z, mandelbrot_power), c);
            z = z_next;

            // colors
            col_smooth += exp( -dot(z,z) );

            // orbit traps
            if (color_mode == 2)
            {
                orbit_pt_dist = min(orbit_pt_dist, fabs( dot(z - orbit_pt, z - orbit_pt) ));
                orbit_coord_dist = min(orbit_coord_dist, fabs( dot(z - z0, z - z0) ));
                orbit_line_dist = min(orbit_line_dist, fabs( distPtLine(z, orbit_line_pt_1, orbit_line_pt_2) ));
                orbit_circle_dist = min(orbit_circle_dist, fabs( distPtCircle(z, orbit_circle_center, orbit_circle_radius) ));
            }
            else if (color_mode == 3)
            {
                orbit_sample_pos = z * float2(orbit_bitmap_zoom) - orbit_bitmap_offset;
                orbit_bitmap_color = c_trap(orbit_sample_pos.x, orbit_sample_pos.y);
                
                if (orbit_bitmap_color.w > 0.05)
                    break;
            }

            if (complex_abs(z) > 4)
                break;
        }

        orbit_pt_dist = sqrt(orbit_pt_dist);
        orbit_coord_dist = sqrt(orbit_coord_dist);

        float4 out_col;
        float col_steps;
        float vis_min;

        if (color_mode == 0) // steps shading
        {
            col_steps = float(i) / float(max_iter);
            if (i == max_iter)
                col_steps = 0.0f;

            out_col = float4(col_steps, col_steps, col_steps, 1.0);
        }

        else if (color_mode == 1) // smooth shading
        {
            col_smooth /= float(max_iter);
            
            out_col = float4(col_smooth, col_smooth, col_smooth, 1.0);
        }

        else if (color_mode == 2) // orbit traps
        {
            out_col = float4(orbit_pt_dist, orbit_coord_dist, orbit_line_dist, orbit_circle_dist);
        }

        else if (color_mode == 3) // bitmap orbit trap
        {
            out_col = orbit_bitmap_color;
        }

        else if (color_mode == 4) // orbit traps visualization
        {
            vis_min = min(
                sqrt( fabs( dot(float2(pos) - orbit_pt_parm, float2(pos) - orbit_pt_parm) )) * 0.0003f, 
                fabs( distPtLine(float2(pos), orbit_line_pt_1_parm, orbit_line_pt_2_parm) ) * 0.0003f
            );

            vis_min = min(
                vis_min,
                fabs( distPtCircle(float2(pos), orbit_circle_center_parm, orbit_circle_radius) ) * 0.0003f
            );
            
            out_col = float4(vis_min, vis_min, vis_min, 1.0f);
        }

        dst() = float4(out_col.x, out_col.y, out_col.z, out_col.w);
    }
};